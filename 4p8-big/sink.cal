namespace big:

    // N - number of messenger actors in network
    // P - number of pings to send
    actor Sink (uint N, uint P) int(size=8) In[N] ==> int(size=32) Done:
        uint completedPingsCount := 0;

        donePings: action ==> Done:[completedPingsCount-1]
        guard
            completedPingsCount = N
        do
            println("All actors complete");
            completedPingsCount := completedPingsCount + 1; // End guard
        end

        for uint i in 0..N-1 generate
            pingComplete: action In[i]:[throwawayToken] ==>
            do
                //println("Sink actor recieved done message from actor " + i);
                completedPingsCount := completedPingsCount + 1;
            end
        end

    end



    // Network that wraps the Sink actor with fixed parameters for when testing the Messenger actor in a standalone
    // manner.
    network SinkWrapper() int(size=8) In[numMessengers] ==> int(size=32) Done:
    entities
        sink = Sink(N=numMessengers, P=numPingPongs);
    structure
        foreach uint i in 0..numMessengers-2 do // -2 as for N actors, we transmit to N-1 actors and then we range from 0 to N-1-1
            In[i] --> sink.In[i];
        end
        sink.Done --> Done;
    end

end