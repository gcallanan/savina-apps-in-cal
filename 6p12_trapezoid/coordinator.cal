namespace trapezoid:
    // Coordinator that distributes the work of calculating the area under f(x)
    // to the W worker actors. It then collects the results and sums them together
    // to report the total area.
    //
    // Ports:
    //     In - An array of W reports, one connected to each W actor, to receive the portion of
    //          area calculated by the specific actor.
    //     Out - An array of W reports, one connected to each W actor, to transmit data for 
    //           calculating the area.
    //     Area - A port that outputs a single token indicating the total calculated area.
    actor Coordinator () float In[W] ==> float Out[W], float Area:

        // Action that distributes the integral calculation to the W worker actors.
        // 
        // Each worker receives for tokens from the coordinator with information required to perform
        // this calculation:
        //     out[w_index][0]: lbound - The left bound of x for the specific worker.
        //     out[w_index][1]: rbound - The right bound of x for the specific worker. 
        //     out[w_index][2]: pieceSize - The width of a single trapezoid
        //     out[w_index][3]: piecesToCompute - The number of trapezoids the worker must compute
        //                                        (This is normall equal except for the final worker
        //                                         which normally has to calculate a few more as N/W
        //                                         is not always a round number).
        initialise: action ==> Out[0..W-1]:[out] repeat 4
        var
            float pieceSize = (R-L)/N,
            float rangePerWorker,
            int currentWorkerPieces,
            int piecesPerWorkerRemainder = N % W,
            int piecesPerWorker = (N - piecesPerWorkerRemainder) / W,
            uint index := 0,
            List(type: List(type: float, size = 4), size = N) out
        do
            
            //println("Init pieces: " + piecesPerWorker + " rem: " + piecesPerWorkerRemainder);
            foreach uint i in 0..W-1 do
                out[i][0] := L + i * piecesPerWorker * pieceSize;
                if i != W - 1 then
                    currentWorkerPieces := piecesPerWorker;
                else
                    currentWorkerPieces := piecesPerWorker + piecesPerWorkerRemainder;
                end
                out[i][1] := out[i][0] + currentWorkerPieces * pieceSize;
                out[i][2] := pieceSize;
                out[i][3] := currentWorkerPieces;
                index := index + 1;
            end
        end

        // Action that receives one token from each worker, sums it up and then outputs the sum as 
        // the total area.
        collect: action In[0..W-1]:[areas] ==> Area:[totalArea]
        var
            float totalArea := 0
        do
            foreach uint i in 0..W-1 do
                totalArea := totalArea + areas[i];
            end
            //println("Area: " + totalArea);
        end

        // The coordinator schedule. Execute the initialise action, then the collect action, then
        // terminate.
        schedule fsm Init:
            Init  (initialise)--> Collect;
            Collect  (collect)--> Termination;
        end


    end

end