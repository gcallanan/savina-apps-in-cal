namespace trapezoid:
    import System.math.cos;
    import System.math.sin;
    import System.math.exp;
    import System.math.sqrt;

    // Function that we are calculating the area of.
    function fx(float x) --> float:
        1/(x+1)*sqrt(1+exp(sqrt(2*x)))*sin(x*x*x-1)
    end

    // @author: Gareth Callanan
    //
    // Worker that calculates the area under f(x) for a certain interval.
    //
    // Parameters:
    //     dummy - Just insert 0 here. The tycho compiler was buggy at the time of writing
    //             and could not evaluate [Worker(dummy=0): for i in 0..W-1] in the network
    //             without this dummy variable.
    // Ports:
    //     In - Tokens from the coordinator are received here.
    //     Out - Tokens to the coordinator transmited out here.
    actor Worker (int dummy) float In ==> float Out:

        // Action that approximates the area of f(x) between two bounds received from the
        // coordinator actor.
        //
        // Input tokens:
        //     lbound - The left bound of x.
        //     rbound - The right bound of x. 
        //     pieceSize - The width of a single trapezoid
        //     piecesToCompute - The number of trapezoids
        //
        // Output tokens:
        //     area - the calculated area of f(x) between the bounds.
        approximate: action In:[lbound, rbound, pieceSize, piecesToCompute] ==> Out:[area]
        var
            float lx := lbound,
            float rx,
            float ly,
            float ry,
            float area := 0,
            int n := piecesToCompute,
            int index := 0
        do
            while index<n do
                lx := lbound + index * pieceSize;
                rx := lx + pieceSize;
                ly := fx(lx);
                ry := fx(rx);
                area := area + 0.5 * (ly + ry) * pieceSize;
                //println(index + "/" + n + " " + lx + " to " + rx + ". " + ly + " and " + ry + ". area:" + 0.5 * (ly + ry) * pieceSize + " . Accu:" + area);
                index:= index+1;
            end
            // println("area:" + area);
            // println("Left:" + lbound + ", Right: " + rbound + ", stepSize: " + pieceSize + " piecesPerWorker: " + piecesToCompute + " n " + n  + ", area: " + area);
        end
    end

end