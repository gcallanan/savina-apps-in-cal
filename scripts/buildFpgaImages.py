"""
@author Gareth Callanan

A script that generates the vivado_hls backend for Streamblocks projects in order to examine how the
AM controller logic use scales as the actor scales.

This script is less polished and reusable than other scripts - it just runs, there is limited sanity 
checking. Sorry. 

We expect that the following is installed:
1. streamblocks-platforms repo
2. streamblocks-examples repo - I expect this repo to be in the same directory as the 
                                savina-apps-in-cal repo. It is directly navigated to from
                                this script
3. Vivado 2020.2
4. The Xilinx Alveo U200 Package for Vivado 2018.2 (Debian file is called: 
   xilinx-u200-xdma-201830.2-2580015_18.04.deb)
"""

import time
import utilities
import os
import re

# Import all the benchmarks
from benchmark import Benchmark
from big_4p8_v1 import big_4p8_v1
from big_4p8_v2 import big_4p8_v2
from trapezoid_6p12 import trapezoid_6p12
from producerConsumer_5p2 import producerConsumer_5p2
from threadRing_4p2 import threadRing_4p2

def buildFpgaImage(benchmark: Benchmark, buildDirectory: str, reducerAlgorithm: str, bypassAmGeneration: bool = False):
    command = f"mkdir -p {buildDirectory}"
    command = f"mkdir -p {buildDirectory}/build"
    exitCode = os.system(command)
    if exitCode != 0:
        raise Exception(f"'{command}' returned non-zero exit code.")

    cmdLineOption = ""
    if(bypassAmGeneration):
        cmdLineOption = "--set bypass-AM-generation=on"
    else:
        cmdLineOption = f"--set default-controller=qj --set reduction-algorithm={reducerAlgorithm}"

    # Run streamblocks compiler to generate HLS code
    command = f"streamblocks vivado-hls --set experimental-network-elaboration=on  {cmdLineOption} --source-path {benchmark.__DIRECTORY__}:../streamblocks-examples/system --set partitioning=on --target-path {buildDirectory} {benchmark.__TOP_ACTOR_NAME__}{benchmark.__TOP_ACTOR_NAME_STREAMBLOCKS_SUFFIX__}"
    print(command)
    exitCode = os.system(command)
    if exitCode != 0:
        raise Exception(f"'{command}' returned non-zero exit code.")
    
    # Run scripts generated by StreamBlocks to turn the generated HLS into RTL, move the RTL into a Vivado project and run synthesis
    command = f"cd {buildDirectory}/vivado-hls && bash scripts/generateSimpleHDLTestbenches_vivado2023.sh && bash scripts/generateVivadoProjectAndSynthesize_vivado2023.sh"
    print(command)
    exitCode = os.system(command)
    if exitCode != 0:
        raise Exception(f"'{command}' returned non-zero exit code.")
    

def writeResourceUsageFileHeader(benchmark: Benchmark, resourceUsageLogFile :str):
    file = open(resourceUsageLogFile, "w")
    file.write(f"File reporting FPGA resource usage for '{benchmark.__BENCHMARK_NAME__}'.\n")
    file.write(f"+--------------------------------------------------+-----------------+-----------------+-----------------+-----------------+-------------+---------------+\n")
    file.write(f"|                                                  |                        Resource Use Percentage                                                      |\n")
    file.write(f"| Experiment Name + Parameters                     |        LUTs     |  LUTs as Logic  |   LUTs as Mem   |      Registers  |    BRAM     |      DPSs     |\n")
    file.write(f"+--------------------------------------------------+-----------------+-----------------+-----------------+-----------------+-------------+---------------+\n")
    #file.write(f"|baseline resource consumption                     | 15.54 ( 183751 )| 13.77 ( 162797 )|  3.54 (  20954 )| 10.95 ( 258830 )| 17.25 (372 )|  0.15 (   10 )|\n")
    file.close()

def writeResourceUsage(benchmark: Benchmark, projectDirectory: str, resourceUsageLogFile: str, appendToFile: str):
    #vivadoLogFilePath = projectDirectory + "/build/vivado-hls/_x/link/vivado/vpl/prj/prj.runs/impl_1/full_util_placed.rpt"
    projDirName = f"{benchmark.__TOP_ACTOR_NAME_NO_PREPATH__}{benchmark.__TOP_ACTOR_NAME_STREAMBLOCKS_SUFFIX__}"
    vivadoLogFilePath = f"{projectDirectory}/vivado-hls/vivado_2023_project_dir/{projDirName}/{projDirName}.runs/synth_1/{projDirName}_vivado2023_utilization_synth.rpt"
    print(vivadoLogFilePath)

    try:
        with open(vivadoLogFilePath) as file:
            lines = file.readlines()
    except Exception:
        lines = 0

    title = f"{benchmark.__BENCHMARK_NAME__}_{appendToFile}"
    try:
        for line in lines:
            if(line.find("LUTs") >= 0 and line.count("|") == 7):
                strSplit = line.split("|")
                LUT_percentage = strSplit[6]
                LUT_value = strSplit[2]
                # print(line)
                # print(LUT_percentage)
            elif (line.find("  LUT as Logic") >= 0 and line.count("|") == 7):
                strSplit = line.split("|")
                LUT_as_Logic_percentage = strSplit[6]
                LUT_as_Logic_value = strSplit[2]
                # print(line)
                # print(LUT_as_Logic_percentage)
            elif (line.find("  LUT as Memory") >= 0 and line.count("|") == 7):
                strSplit = line.split("|")
                LUT_as_Mem_percentage = strSplit[6]
                LUT_as_Mem_value = strSplit[2]
                # print(line)
                # print(LUT_as_Mem_percentage)
            elif (line.find("Registers") >= 0 and line.count("|") == 7):
                strSplit = line.split("|")
                Reg_percentage = strSplit[6]
                Reg_value = strSplit[2]
                # print(line)
                # print(Reg_percentage)
            elif (line.find("Block RAM Tile") >= 0 and line.count("|") == 7):
                strSplit = line.split("|")
                BRAM_percentage = strSplit[6]
                BRAM_value = round(float(strSplit[2]))
                # print(line)
                # print(BRAM_percentage)
            elif (line.find("DSPs") >= 0 and line.count("|") == 7):
                strSplit = line.split("|")
                DSP_percentage = strSplit[6]
                DSP_value = strSplit[2]
                # print(line)
                # print(DSP_percentage)
        outputLine = f"|{title:<50}|{LUT_percentage}({LUT_value:<7}) |{LUT_as_Logic_percentage}({LUT_as_Logic_value:<7}) |{LUT_as_Mem_percentage}({LUT_as_Mem_value:<7}) |{Reg_percentage}({Reg_value:<7}) |{BRAM_percentage}({BRAM_value:<4})|{DSP_percentage}({DSP_value:<4})|\n"
    except Exception:
        outputLine = f"|{title:<50}| Parsing results failed ... \n"

    with open(resourceUsageLogFile, "a") as file:
        file.write(outputLine)

def writeResourceUsageFileFooter(resourceUsageLogFile :str):
    with open(resourceUsageLogFile, "a") as file:
        file.write(f"+--------------------------------------------------+-----------------+-----------------+-----------------+-----------------+-------------+---------------+\n")

if __name__ == "__main__":

    # 1. Get experiment parameters
    benchmarks = [threadRing_4p2(), big_4p8_v1(), producerConsumer_5p2(), trapezoid_6p12(), big_4p8_v2()]
    benchmark = benchmarks[4]
    experimentParams = utilities.generateExperimentParams(benchmark.getAMScalingExperimentParameters())
    reducerAlgorithm = "first"
    #reducerAlgorithm = "ordered-condition-checking"
    bypassAMGeneration=False

    # 2. Set up all variables required for running experiments
    testIndex = 0
    startTime_s = time.time()
    numTests = len(experimentParams)
    directory = benchmark.__DIRECTORY__
    directoryTime = time.strftime('%Y%m%d_%H%M')

    # 2.1 Create a common log file where resource use across different experiments is  written to
    reducerString = "bypassAm" if bypassAMGeneration else reducerAlgorithm
    resourceUsageLogFile = f"{benchmark.__DIRECTORY__}/fpgabuilds/{directoryTime}_{benchmark.__BENCHMARK_NAME__}_{reducerString}_resource_usage.txt"
    writeResourceUsageFileHeader(benchmark, resourceUsageLogFile)
    count = 0

    # 3. Run all the experiments
    for experimentParam in experimentParams:
        runningTime_s = round(time.time() - startTime_s, 2)
        print(
                f"{runningTime_s:07.2f} Running runtime test {testIndex+1} of {numTests} for {benchmark.__TOP_ACTOR_NAME__} with params:",
                experimentParam,
            )

        # 3.0 Write the experiment parameters to the CAL config file
        utilities.writeConfigFile(benchmark, experimentParam)

        # 3.1 Create the correct directory
        paramString = ''.join([f"_{k}{v}" for k,v in experimentParam.items()])
        directory = benchmark.__DIRECTORY__ + f"/fpgabuilds/{directoryTime}_{benchmark.__BENCHMARK_NAME__}_{reducerString}" + paramString
        print(directory)
        
        # 3.2 Build the project
        buildFpgaImage(benchmark, directory, reducerAlgorithm, bypassAMGeneration)

        # 3.3 Write all results to file
        writeResourceUsage(benchmark, directory, resourceUsageLogFile, paramString)
        

    # 4. Reset config file to prevent git commit issues
    utilities.writeConfigFile(
            benchmark, experimentParams[0]
        )   

    writeResourceUsageFileFooter(resourceUsageLogFile)

    runningTime_s = round(time.time() - startTime_s, 2)
    print(f"Done in {runningTime_s:07.2f}")


import csv

def table_to_csv(input_file, output_file, reducer: str = "AM Bypass"):
    """
    Converts the generated table with rows and columns to a CSV file.

    Parameters:
        input_file (str): Path to the input file containing the table.
        output_file (str): Path to the output CSV file.
    """
    with open(input_file, 'r') as infile:
        lines = infile.readlines()

    # Process header row
    header = ["Reducer"] + [col.strip() for col in lines[3].split('|') if col.strip() != ''] + ["Execution time (us)"] + ["Passed Timing"]

    # Process rows
    def processEntry(entry: str) -> str:
        withinBraces = entry[entry.find("(")+1:entry.find(")")]
        return withinBraces.strip()

    rows = []
    for line in lines[5:]:  # Skip separator rows
        if not line.count('|') > 3:
            continue
        columns = [processEntry(col) for col in line.split('|') if col.strip() != '']
        rows.append([reducer] + columns + ["-1"] + ["-1"])  # Add default columns

    # Write to CSV
    with open(output_file, 'w', newline='') as csvfile:
        csvwriter = csv.writer(csvfile)
        csvwriter.writerow(header)
        csvwriter.writerows(rows)