namespace threadRing:
    
    // @author: Gareth Callanan
    //
    // Actor connected in the the thread ring. Receives a token, decrements its
    // value by one and passes the token on. The token is not forwarded if when
    // value reaches 0. 
    //
    // Parameters:
    //     firstActor - One actor in the ring needs to inject the token into
    //                  the ring for the first time if this parameter is set to
    //                  one, then this actor will be the one that creates that
    //                  first token.
    //
    // Ports:
    //     In - Port that receives the token travelling around the ring.
    //     Out - Port where the received token is transmitted on.
    actor ThreadRingActor (uint(size = 1) firstActor) uint In ==> uint Out:
        
        // Guard that will determine in the initialise action is run.
        uint(size = 1) runInit := firstActor;

        // Action that receives the token and forwards it if its value is not
        // equal to zero. The value of the token is also decremented by 1 here.
        passToken: action In:[token] ==> Out:[token-1]
        guard
            token != 0
        do
            //println("Received Token: " + token);
        end

        // Initialise action that injects the first token into the ring.
        // This actions is run exactly once. And only if firstActor is equal
        // to 1.
        initialise: action ==> Out:[R]
        guard
            runInit = 1
        do
            runInit := 0;
        end
    end

    network ThreadRing () ==>:
    entities 
        // Create all the ThreadRingActors and set the first one to have a firstActor value of 1
        // All the rest have this value set to zero to prevent multiple tokens being transmitted
        // around the loop.
        actors = [ThreadRingActor(firstActor=(if i = 0 then 1 else 0 end)): for i in 0..N-1];
    structure
        // Connect all the actors in the ring
        foreach uint i in 0..N-1 do
            actors[i].Out --> actors[(i + 1) % N].In;
        end
    end

end